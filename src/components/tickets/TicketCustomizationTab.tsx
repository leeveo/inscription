'use client'

import React, { useState, useEffect } from 'react'
import {
  FiEdit3,
  FiSave,
  FiEye,
  FiDownload,
  FiPrinter,
  FiArrowLeft,
  FiSettings,
  FiPlus
} from 'react-icons/fi'
import { TicketTemplate, TicketData } from '@/types/ticket-templates'
import TemplateSelector from './TemplateSelector'
import TicketEditor from './TicketEditor'
import TicketPDFGenerator from './TicketPDFGenerator'

interface TicketCustomizationTabProps {
  eventId: string
  eventName?: string
}

// Type pour les donn√©es d'√©v√©nement (selon sch√©ma exact de inscription_evenements)
type EventData = {
  id: string
  nom: string
  description?: string
  lieu?: string
  date_debut: string
  date_fin?: string
  prix?: number
  places_disponibles?: number
  organisateur?: string
  email_contact?: string
  telephone_contact?: string
  logo_url?: string
  statut?: string
  type_evenement?: string
  code_acces?: string
  created_at: string
  // Donn√©es calcul√©es ajout√©es par l'API
  sessions?: any[]
  participant_count?: number
  formatted?: {
    startDate: string
    endDate: string
    startTime: string
    endTime: string
  }
  statistics?: {
    totalParticipants: number
    totalSessions: number
    checkedInParticipants: number
  }
}

export default function TicketCustomizationTab({ eventId, eventName }: TicketCustomizationTabProps) {
  const [currentView, setCurrentView] = useState<'selector' | 'editor'>('selector')
  const [selectedTemplate, setSelectedTemplate] = useState<TicketTemplate | null>(null)
  const [eventData, setEventData] = useState<EventData | null>(null)
  const [isLoadingEvent, setIsLoadingEvent] = useState(false)
  const [templateData, setTemplateData] = useState<TicketData>({
    // Event Information - Donn√©es par d√©faut, sera remplac√© par les vraies donn√©es
    eventName: eventName || 'Mon √âv√©nement',
    eventId: eventId,
    eventType: 'CONFERENCE',
    organizerName: 'Organisation',
    organizerContact: {
      email: 'contact@event.com',
      phone: '+33 1 23 45 67 89',
      website: 'https://mon-event.com'
    },
    venue: {
      name: 'Centre de Conf√©rences',
      address: 'Adresse non renseign√©e',
      city: 'Ville non renseign√©e',
      postalCode: 'CP non renseign√©',
      country: 'France',
      capacity: 0
    },
    schedule: {
      startDate: 'Date non renseign√©e',
      endDate: 'Date non renseign√©e',
      doorsOpen: '18:30',
      startTime: '20:00',
      endTime: '23:00',
      timezone: 'Europe/Paris'
    },
    description: 'Taylor Swift | The Eras Tour est une tourn√©e de concerts de la chanteuse am√©ricaine Taylor Swift.',
    termsUrl: 'https://livenation.fr/terms',
    websiteUrl: 'https://www.taylorswift.com',

    // Attendee Information
    firstName: 'JOHN',
    lastName: 'DOE',
    fullName: 'JOHN DOE',
    email: 'john.doe@email.com',
    phone: '+33 6 12 34 56 78',
    address: {
      street: '123 Rue de la R√©publique',
      city: 'Paris',
      postalCode: '75001',
      country: 'France'
    },
    profession: 'D√©veloppeur',
    company: 'Tech Company',
    ticketId: 'TK-2024-001234',
    registrationDate: '15/03/2024',
    registrationSource: 'Online',

    // Product Information
    ticketType: 'CAT√âGORIE 1 - PLACEMENT DEBOUT',
    ticketCategory: 'VIP',
    accessLevel: 'TOUT ACC√àS',
    seating: {
      section: 'BLOC N3',
      row: 'RANG 3',
      seat: 'SI√àGE 15',
      entrance: 'PORTE A'
    },
    benefits: ['Acc√®s VIP', 'Bar priv√©', 'Vue optimale'],
    restrictions: ['Interdiction photo professionnelle', 'Cam√©ras interdites'],
    addOns: [
      { name: 'VIP Pack', quantity: 1 },
      { name: 'T-shirt exclusif', quantity: 2 }
    ],

    // Pricing Information
    currency: 'EUR',
    price: 125.00,
    fees: 12.50,
    tax: 24.50,
    total: 162.00,

    // Security Features
    qrCode: 'QR-TS2024-001234-VALID',
    qrUrl: 'https://event-app.com/verify/QR-TS2024-001234-VALID',
    barcode: '12345678901234567890',
    barcodeFormat: 'CODE128',
    ticketNumber: 'N¬∞ 001234',
    serialNumber: 'TSERAS2024-001',
    securityFeatures: {
      watermark: true,
      hologram: true,
      uvFeatures: true,
      microtext: false
    },
    validation: {
      validFrom: '31/05/2024 18:00',
      validUntil: '31/05/2024 23:59',
      maxEntries: 1,
      usedEntries: 0
    },

    // Legal Information
    termsAndConditions: 'Ce billet est personnel et incessible. La vente est d√©finitive. Aucun remboursement. Annulation possible jusqu\'√† 48h avant l\'√©v√©nement.',
    privacyPolicy: 'Conform√©ment au RGPD, vos donn√©es sont prot√©g√©es et ne seront pas partag√©es sans consentement.',
    liabilityWaiver: 'L\'organisateur d√©cline toute responsabilit√© en cas d\'accident ou de vol.',
    cancelationPolicy: 'Annulation possible jusqu\'√† 48h avant l\'√©v√©nement avec remboursement de 80%.',
    ageRestriction: 'Interdit aux moins de 16 ans sauf accompagn√©s.',
    photoConsent: 'En entrant, vous acceptez d\'√™tre potentiellement photographi√©.',
    dataProtection: 'Vos donn√©es personnelles sont prot√©g√©es conform√©ment au RGPD.',

    // Layout Options
    format: {
      size: 'custom',
      orientation: 'portrait',
      width: 350,
      height: 800,
      units: 'pixels'
    },
    layout: {
      columns: 1,
      rows: 1,
      spacing: 0,
      margins: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      },
      perforation: false,
      folding: false
    },

    // Media
    backgroundImage: '/t√©l√©chargement.png',
    artistImage: '/t√©l√©chargement.png',
    sponsorLogos: []
  })

  // Charger les donn√©es de l'√©v√©nement
  // Charger les donn√©es de l'√©v√©nement
  useEffect(() => {
    if (!eventId) return

    const fetchEventData = async () => {
      try {
        setIsLoadingEvent(true)
        console.log('üé´ Chargement des donn√©es de l\'√©v√©nement pour tickets:', eventId)
        
        const response = await fetch(`/api/builder/event-data/${eventId}`)
        if (response.ok) {
          const result = await response.json()
          const event = result.data
          setEventData(event)
          
          console.log('üé´ Donn√©es √©v√©nement re√ßues:', event)
          console.log('üè¢ event.organisateur:', event.organisateur)
          console.log('üìç event.lieu:', event.lieu) 
          console.log('üìß event.email_contact:', event.email_contact)
          console.log('üìû event.telephone_contact:', event.telephone_contact)
          console.log('üí∞ event.prix:', event.prix)
          
          // Log des donn√©es mapp√©es
          const lieuParts = event.lieu ? event.lieu.split(' - ') : []
          console.log('üéØ Lieu s√©par√© - nom:', lieuParts[0])
          console.log('üéØ Lieu s√©par√© - adresse:', lieuParts.length > 1 ? lieuParts.slice(1).join(' - ') : 'Non renseign√©')

          // R√©cup√©rer un participant exemple pour les tests
          const participantsResponse = await fetch(`/api/participants?eventId=${eventId}&limit=1`)
          let sampleParticipant = null
          if (participantsResponse.ok) {
            const participantsResult = await participantsResponse.json()
            if (participantsResult.participants && participantsResult.participants.length > 0) {
              sampleParticipant = participantsResult.participants[0]
              console.log('üé´ Participant exemple trouv√©:', sampleParticipant)
            }
          }

          // Mettre √† jour les donn√©es du template avec TOUTES les informations r√©elles de l'√©v√©nement
          setTemplateData(prevData => ({
            ...prevData,
            
            // === DONN√âES DE L'√âV√âNEMENT (R√âELLES depuis inscription_evenements) ===
            eventName: event.nom || eventName || 'Mon √âv√©nement',
            eventId: eventId,
            eventType: event.type_evenement?.toUpperCase() || 'CONFERENCE',
            
            // Organisateur - Utiliser seulement les colonnes existantes dans le sch√©ma
            organizerName: event.organisateur || 'Organisation',
            organizerContact: {
              email: event.email_contact || 'contact@event.com',
              phone: event.telephone_contact || '+33 1 23 45 67 89', 
              website: 'https://mon-event.com'
            },
            
            // Lieu - Utiliser seulement les colonnes existantes dans le sch√©ma
            venue: {
              name: (() => {
                if (!event.lieu) return 'Centre de Conf√©rences'
                // Si le lieu contient " - ", s√©parer en nom et ville
                const parts = event.lieu.split(' - ')
                return parts[0] || event.lieu
              })(),
              address: (() => {
                if (!event.lieu) return 'Adresse non renseign√©e'
                // Si le lieu contient " - ", utiliser la partie apr√®s comme adresse
                const parts = event.lieu.split(' - ')
                return parts.length > 1 ? parts.slice(1).join(' - ') : 'Adresse non renseign√©e'
              })(),
              city: (() => {
                if (!event.lieu) return 'Ville non renseign√©e'
                const parts = event.lieu.split(' - ')
                return parts.length > 1 ? parts[parts.length - 1] : 'Ville non renseign√©e'
              })(),
              postalCode: 'CP non renseign√©',
              country: 'France',
              capacity: event.places_disponibles || 0
            },
            
            // Dates et horaires - Formatage fran√ßais
            schedule: {
              startDate: event.formatted?.startDate || (event.date_debut ? new Date(event.date_debut).toLocaleDateString('fr-FR', {
                day: '2-digit',
                month: 'long',
                year: 'numeric'
              }) : 'Date non renseign√©e'),
              endDate: event.formatted?.endDate || (event.date_fin ? new Date(event.date_fin).toLocaleDateString('fr-FR', {
                day: '2-digit',
                month: 'long',
                year: 'numeric'
              }) : 'Date non renseign√©e'),
              doorsOpen: '08:00',
              startTime: event.formatted?.startTime || (event.date_debut ? new Date(event.date_debut).toLocaleTimeString('fr-FR', {
                hour: '2-digit',
                minute: '2-digit'
              }) : '09:00'),
              endTime: event.formatted?.endTime || (event.date_fin ? new Date(event.date_fin).toLocaleTimeString('fr-FR', {
                hour: '2-digit',
                minute: '2-digit'
              }) : '18:00'),
              timezone: 'Europe/Paris'
            },
            
            // Autres informations √©v√©nement
            description: event.description || 'Description de l\'√©v√©nement',
            websiteUrl: event.organisation_site_web || 'https://mon-event.com',
            termsUrl: event.organisation_site_web ? `${event.organisation_site_web}/conditions` : undefined,
            
            // === DONN√âES DU PARTICIPANT (exemple ou r√©el si disponible) ===
            firstName: sampleParticipant?.prenom || 'JEAN',
            lastName: sampleParticipant?.nom || 'DUPONT',
            fullName: sampleParticipant ? `${sampleParticipant.prenom.toUpperCase()} ${sampleParticipant.nom.toUpperCase()}` : 'JEAN DUPONT',
            email: sampleParticipant?.email || 'jean.dupont@company.com',
            phone: sampleParticipant?.telephone || '+33 6 12 34 56 78',
            
            // Adresse participant (structure compl√®te)
            address: {
              street: '123 Avenue des Champs-√âlys√©es',
              city: 'Paris',
              postalCode: '75008',
              country: 'France'
            },
            
            // Informations professionnelles
            dateOfBirth: sampleParticipant?.date_naissance || undefined,
            profession: sampleParticipant?.profession || 'Profession',
            company: sampleParticipant?.profession || 'Nom Entreprise',
            
            // === DONN√âES DE TICKET (g√©n√©r√©es) ===
            ticketId: `TICKET-${eventId.slice(-8)}-${Date.now().toString().slice(-6)}`,
            registrationDate: sampleParticipant?.created_at ? new Date(sampleParticipant.created_at).toLocaleDateString('fr-FR') : new Date().toLocaleDateString('fr-FR'),
            registrationSource: 'Online',
            ticketType: 'STANDARD',
            ticketCategory: 'PARTICIPANT',
            accessLevel: 'ACC√àS COMPLET',
            
            // Informations si√®ge
            seating: {
              section: 'SECTION A',
              row: 'RANG 1',
              seat: 'SI√àGE 42',
              entrance: 'ENTR√âE PRINCIPALE'
            },
            
            // Avantages et restrictions
            benefits: ['Acc√®s conf√©rence', 'Networking', 'D√©jeuner inclus'],
            restrictions: ['Interdiction de photographier'],
            addOns: [],
            
            // Prix et monnaie
            currency: 'EUR',
            price: event.prix || 0,
            fees: 0,
            tax: 0,
            total: event.prix || 0,
            
            // QR Code et s√©curit√©
            qrCode: `https://event-app.com/checkin/${eventId}/${sampleParticipant?.id || 'demo'}`,
            qrUrl: `https://event-app.com/checkin/${eventId}/${sampleParticipant?.id || 'demo'}`,
            barcode: String(Date.now()).slice(-12),
            barcodeFormat: 'CODE128',
            ticketNumber: `TICKET-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`,
            serialNumber: `TKT2025-${String(Math.floor(Math.random() * 1000)).padStart(3, '0')}`,
            
            // Fonctionnalit√©s de s√©curit√©
            securityFeatures: {
              watermark: true,
              hologram: false,
              uvFeatures: false,
              microtext: true
            },
            
            // Validation
            validation: {
              validFrom: event.date_debut || new Date().toISOString(),
              validUntil: event.date_fin || new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
              maxEntries: 1,
              usedEntries: 0
            },
            
            // Conditions l√©gales
            termsAndConditions: 'Conditions g√©n√©rales d\'utilisation',
            privacyPolicy: 'Politique de confidentialit√©',
            liabilityWaiver: 'D√©charge de responsabilit√©',
            cancelationPolicy: 'Politique d\'annulation',
            ageRestriction: 'Aucune restriction d\'√¢ge',
            photoConsent: 'Autorisation de prise de photos',
            dataProtection: 'Protection des donn√©es RGPD',
            
            // Format et mise en page
            format: {
              size: 'A4' as const,
              orientation: 'portrait' as const,
              width: 210,
              height: 297,
              units: 'mm' as const
            },
            
            // Layout
            layout: {
              columns: 1,
              rows: 1,
              spacing: 10,
              margins: {
                top: 20,
                right: 20,
                bottom: 20,
                left: 20
              },
              perforation: true,
              folding: false
            },
            
            // Images et m√©dias
            backgroundImage: undefined,
            artistImage: undefined,
            sponsorLogos: [],
            customFields: {}
          }))
          
          console.log('üé´ ===== DONN√âES R√âELLES INT√âGR√âES DANS TICKETS =====')
          console.log('üìÖ √âv√©nement :', event.nom)
          console.log('ÔøΩ Organisateur :', event.organisateur)
          console.log('üìç Lieu :', event.lieu)
          console.log('üóìÔ∏è Date :', event.date_debut ? new Date(event.date_debut).toLocaleDateString('fr-FR') : 'Non d√©finie')
          console.log('üìß Contact :', event.email_contact)
          console.log('üìû T√©l :', event.telephone_contact)
          console.log('üí∞ Prix :', event.prix + '‚Ç¨')
          console.log('üë• Capacit√© :', event.places_disponibles + ' places')
          console.log('üîÑ Variables automatiques : Tous les templates de tickets utilisent maintenant ces donn√©es r√©elles au lieu de donn√©es fictives.')
        }
      } catch (error) {
        console.error('Error fetching event data:', error)
      } finally {
        setIsLoadingEvent(false)
      }
    }

    fetchEventData()
  }, [eventId, eventName])

  const handleTemplateSelect = (template: TicketTemplate) => {
    setSelectedTemplate(template)
    setCurrentView('editor')
  }

  const handleTemplateEdit = (template: TicketTemplate) => {
    setSelectedTemplate(template)
    setCurrentView('editor')
  }

  const handleTemplateChange = (template: TicketTemplate) => {
    setSelectedTemplate(template)
  }

  const handleDataChange = (data: TicketData) => {
    setTemplateData(data)
  }

  const handleSave = async () => {
    if (!selectedTemplate) return

    try {
      const response = await fetch('/api/ticket-templates', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: selectedTemplate.id,
          name: selectedTemplate.name,
          schema: {
            layout: {
              width: selectedTemplate.width,
              height: selectedTemplate.height,
              margins: { top: 10, right: 10, bottom: 10, left: 10 }
            },
            zones: selectedTemplate.zones,
            background: selectedTemplate.background
          },
          styles: selectedTemplate.styles,
          settings: {
            print: {
              dpi: 300,
              quality: 'high',
              duplex: false,
              color: true
            },
            qr: {
              error_correction: 'M',
              size: 200,
              margin: 2,
              foreground: '#000000',
              background: '#ffffff'
            },
            barcode: {
              format: 'CODE128',
              width: 2,
              height: 100,
              show_text: true
            },
            security: {
              watermark: false,
              watermark_opacity: 0.1,
              serialize: true
            }
          }
        })
      })

      const data = await response.json()

      if (data.success) {
        alert('Template sauvegard√© avec succ√®s!')
      } else {
        alert(data.error || 'Erreur lors de la sauvegarde')
      }
    } catch (error) {
      console.error('Error saving template:', error)
      alert('Erreur lors de la sauvegarde')
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          {currentView === 'editor' && (
            <button
              onClick={() => setCurrentView('selector')}
              className="flex items-center gap-2 px-3 py-2 text-gray-600 hover:text-gray-800"
            >
              <FiArrowLeft className="w-4 h-4" />
              Retour
            </button>
          )}
          <div>
            <h2 className="text-2xl font-bold text-gray-900">
              {currentView === 'selector' ? 'Personnalisation des Tickets' : `√âdition: ${selectedTemplate?.name || 'Template'}`}
            </h2>
            <p className="text-gray-600 mt-1">
              {currentView === 'selector'
                ? 'Choisissez et personnalisez des templates de tickets pour vos √©v√©nements'
                : 'Personnalisez les d√©tails de votre template de ticket'
              }
            </p>
          </div>
        </div>
        {currentView === 'selector' && (
          <button
            onClick={() => setCurrentView('editor')}
            disabled={!selectedTemplate}
            className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg transition-colors disabled:cursor-not-allowed"
          >
            <FiEdit3 className="w-4 h-4" />
            √âditer le template
          </button>
        )}
      </div>

      {/* Affichage des donn√©es r√©elles int√©gr√©es */}
      {eventData && (
        <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex gap-3">
            <div className="flex-shrink-0">
              <svg className="w-5 h-5 text-green-600 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
            </div>
            <div>
              <h3 className="text-sm font-medium text-green-900">Donn√©es r√©elles int√©gr√©es automatiquement</h3>
              <div className="mt-2 text-sm text-green-800">
                <p>‚úÖ <strong>Donn√©es r√©elles de inscription_evenements int√©gr√©es :</strong></p>
                <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-1 text-xs">
                  <div>üìÖ <strong>√âv√©nement :</strong> {eventData.nom}</div>
                  <div>üè¢ <strong>Organisateur :</strong> {eventData.organisateur || 'Non renseign√©'}</div>
                  <div>üìç <strong>Lieu :</strong> {eventData.lieu || 'Non renseign√©'}</div>
                  <div>üóìÔ∏è <strong>Date :</strong> {eventData.date_debut ? new Date(eventData.date_debut).toLocaleDateString('fr-FR') : 'Non renseign√©e'}</div>
                  <div>üìß <strong>Contact :</strong> {eventData.email_contact || 'Non renseign√©'}</div>
                  <div>üìû <strong>T√©l :</strong> {eventData.telephone_contact || 'Non renseign√©'}</div>
                  {eventData.prix !== undefined && (
                    <div>üí∞ <strong>Prix :</strong> {eventData.prix}‚Ç¨</div>
                  )}
                  {eventData.places_disponibles && (
                    <div>üë• <strong>Capacit√© :</strong> {eventData.places_disponibles} places</div>
                  )}
                </div>
                <div className="mt-2 p-2 bg-green-100 rounded border text-xs">
                  <strong>üîÑ Variables automatiques :</strong> Tous les templates de tickets utilisent maintenant ces donn√©es r√©elles au lieu de donn√©es fictives.
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Indicateur de chargement */}
      {isLoadingEvent && (
        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center gap-3">
            <div className="animate-spin w-5 h-5 border-2 border-blue-600 border-t-transparent rounded-full"></div>
            <span className="text-blue-900 font-medium">Chargement des donn√©es de l'√©v√©nement...</span>
          </div>
        </div>
      )}

      {/* Contenu principal */}
      {currentView === 'selector' && (
        <TemplateSelector
          eventId={eventId}
          onTemplateSelect={handleTemplateSelect}
          onTemplateEdit={handleTemplateEdit}
          selectedTemplate={selectedTemplate}
        />
      )}

      {currentView === 'editor' && selectedTemplate && (
        <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
          {/* √âditeur principal (2/3 de la largeur) */}
          <div className="xl:col-span-2">
            <TicketEditor
              template={selectedTemplate}
              onTemplateChange={handleTemplateChange}
              onSave={handleSave}
              data={templateData}
              onDataChange={handleDataChange}
            />
          </div>

          {/* Panneau lat√©ral (1/3 de la largeur) */}
          <div className="space-y-6">
            {/* G√©n√©ration et impression */}
            <TicketPDFGenerator
              template={selectedTemplate}
              data={templateData}
            />

            {/* Donn√©es du ticket */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <FiSettings className="w-5 h-5" />
                Donn√©es du ticket
              </h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Nom de l'√©v√©nement</label>
                  <input
                    type="text"
                    value={templateData.eventName}
                    onChange={(e) => handleDataChange({ ...templateData, eventName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Organisateur</label>
                  <input
                    type="text"
                    value={templateData.organizerName}
                    onChange={(e) => handleDataChange({ ...templateData, organizerName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Nom du lieu</label>
                  <input
                    type="text"
                    value={templateData.venue.name}
                    onChange={(e) => handleDataChange({ ...templateData, venue: {...templateData.venue, name: e.target.value} })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Adresse du lieu</label>
                  <input
                    type="text"
                    value={templateData.venue.address}
                    onChange={(e) => handleDataChange({ ...templateData, venue: {...templateData.venue, address: e.target.value} })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Nom du participant</label>
                  <input
                    type="text"
                    value={templateData.fullName || ''}
                    onChange={(e) => handleDataChange({ ...templateData, fullName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Informations si√®ge</label>
                  <input
                    type="text"
                    value={templateData.seating?.section || ''}
                    onChange={(e) => handleDataChange({ 
                      ...templateData, 
                      seating: { 
                        ...templateData.seating, 
                        section: e.target.value 
                      } 
                    })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Prix</label>
                  <input
                    type="number"
                    value={templateData.price || 0}
                    onChange={(e) => handleDataChange({ ...templateData, price: parseFloat(e.target.value) || 0 })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Num√©ro de ticket</label>
                  <input
                    type="text"
                    value={templateData.ticketNumber}
                    onChange={(e) => handleDataChange({ ...templateData, ticketNumber: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>

            {/* Actions rapides */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Actions rapides</h3>
              <div className="space-y-3">
                <button
                  onClick={() => {
                    const newData = { ...templateData }
                    // G√©n√©rer un num√©ro de ticket unique
                    newData.ticketNumber = `N¬∞ ${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`
                    handleDataChange(newData)
                  }}
                  className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
                >
                  <FiPlus className="w-4 h-4" />
                  G√©n√©rer nouveau num√©ro
                </button>

                <button
                  onClick={() => {
                    const newData = { ...templateData }
                    // Remplacer les donn√©es par des exemples
                    newData.fullName = 'MARIE CURIE'
                    newData.seating = { ...newData.seating, section: 'BLOC A - RANG 1 - SI√àGE 42' }
                    handleDataChange(newData)
                  }}
                  className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                >
                  <FiEye className="w-4 h-4" />
                  Utiliser donn√©es d'exemple
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}